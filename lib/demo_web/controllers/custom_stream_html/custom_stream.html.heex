<.flash_group flash={@flash} /> 
<!-- Nó là phần chuyển qua xem full list video stream -->
<a href="/videos" target="_blank"
  class="px-4 py-2 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition mr-3">
  List Video
</a>

<a href="/stream_key" target="_blank"
  class="px-4 py-2 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition mr-3">
  Stream key setting
</a>

<!-- Nó là phần tải video -->
<button id="convert-btn"
  class="px-4 py-2 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 transition">
  Chuyển đổi và tải video
</button>

<p id="loading-text" class="hidden text-red-500 mt-2">Đang tải, vui lòng chờ...</p>

<a id="download-link" href="#" target="_blank"
  class="hidden px-4 py-2 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition">
  Tải video stream
</a>

<!-- Thực hiện việc tải và check trạng thái -->
<script>
  document.getElementById("convert-btn").addEventListener("click", async () => {
    let loadingText = document.getElementById("loading-text");
    let downloadLink = document.getElementById("download-link");

    loadingText.classList.remove("hidden"); // Hiện loading
    downloadLink.classList.add("hidden");   // Ẩn nút tải

    // Gửi yêu cầu chuyển đổi
    await fetch("/convert");

    // Kiểm tra liên tục khi nào video sẵn sàng
    let checkInterval = setInterval(async () => {
      let response = await fetch("/check_status");
      let result = await response.json();

      if (result.status === "done") {
        clearInterval(checkInterval);
        loadingText.classList.add("hidden"); // Ẩn loading
        downloadLink.href = result.download_url;
        downloadLink.classList.remove("hidden"); // Hiện nút tải
      }
    }, 3000); // Kiểm tra mỗi 3 giây
  });
</script>
<!-- Nó là phần upload video -->

<div class="max-w-md mx-auto p-6 bg-white rounded-2xl shadow-lg">
  <h1 class="text-2xl font-bold text-gray-800 mb-4">Upload Video</h1>

  <input type="text" id="titleInput" placeholder="Nhập tiêu đề"
    class="block w-full px-4 py-2 mb-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none" />

  <textarea id="descriptionInput" placeholder="Nhập mô tả"
    class="block w-full px-4 py-2 mb-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"></textarea>

  <input type="file" id="fileInput" accept="video/*"
    class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />

  <button onclick="uploadAndSaveVideo()"
    class="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-xl transition">
    Upload & Lưu Video
  </button>

  <p id="status" class="mt-2 text-sm text-gray-600"></p>
</div>

<script>
  async function uploadAndSaveVideo() {
    console.log("🚀 Bắt đầu upload video...");

    const fileInput = document.getElementById("fileInput");
    if (!fileInput.files.length) {
      alert("⚠️ Vui lòng chọn video để upload!");
      return;
    }

    const file = fileInput.files[0];
    const title = document.getElementById("titleInput").value.trim();
    const description = document.getElementById("descriptionInput").value.trim();

    if (!title || !description) {
      alert("⚠️ Vui lòng nhập tiêu đề và mô tả!");
      return;
    }

    try {
      // 1️⃣ Upload video lên Cloudinary
      console.log("📡 Đang lấy URL upload từ Phoenix...");
      const res = await fetch("/api/get_upload_url", { method: "POST" });
      if (!res.ok) throw new Error(`❌ Lỗi lấy URL upload: ${res.statusText}`);

      const { upload_url, upload_preset } = await res.json();
      console.log("✅ Upload URL:", upload_url);

      const formData = new FormData();
      formData.append("file", file);
      formData.append("upload_preset", upload_preset);

      console.log("🚀 Đang upload video lên Cloudinary...");
      const uploadRes = await fetch(upload_url, {
        method: "POST",
        body: formData
      });

      if (!uploadRes.ok) {
        const errorData = await uploadRes.json();
        throw new Error(`❌ Lỗi upload: ${JSON.stringify(errorData)}`);
      }

      const uploadData = await uploadRes.json();
      const uploadedVideoUrl = uploadData.secure_url;
      console.log("✅ Upload thành công:", uploadedVideoUrl);

      // 2️⃣ Lưu video vào database
      console.log("💾 Đang lưu video vào database...");
      const saveRes = await fetch("/api/save_video", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ title, description, url: uploadedVideoUrl })
      });

      if (!saveRes.ok) {
        throw new Error(`❌ Lỗi từ server: ${saveRes.statusText}`);
      }

      const result = await saveRes.json();
      console.log("✅ Kết quả lưu:", result);

      if (result.status === "ok") {
        alert("🎉 Video đã được lưu thành công!");
      } else {
        console.error("❌ Lỗi lưu video:", result.errors);
        alert("⚠️ Lỗi khi lưu video. Kiểm tra lại dữ liệu.");
      }
    } catch (error) {
      console.error("❌ Lỗi:", error);
      alert("❌ Lỗi khi tải lên hoặc lưu video!");
    }
  }

  // 🖱️ Gán sự kiện onclick cho nút upload
  document.getElementById("uploadButton").onclick = uploadAndSaveVideo;

</script>




<%= live_render(@conn, DemoWeb.ConfirmLive) %>